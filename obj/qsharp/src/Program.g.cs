//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"QRNG\",\"Name\":\"SayHello\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Core\",\"Name\":\"EntryPoint\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":12}}]}}]},\"Argument\":{\"Item1\":{\"Case\":\"UnitValue\"},\"Item2\":[],\"Item3\":{\"Case\":\"UnitType\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":12},\"Item2\":{\"Line\":1,\"Column\":14}}]}},\"Offset\":{\"Item1\":8,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\ikeav\\\\Desktop\\\\Quantum Computing\\\\Q# Practice\\\\QRNG\\\\Program.qs\",\"Position\":{\"Item1\":9,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":19}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QRNG\",\"Name\":\"SayHello\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\ikeav\\\\Desktop\\\\Quantum Computing\\\\Q# Practice\\\\QRNG\\\\Program.qs\",\"Position\":{\"Item1\":9,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"QRNG\",\"Name\":\"RandInt\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\ikeav\\\\Desktop\\\\Quantum Computing\\\\Q# Practice\\\\QRNG\\\\Program.qs\",\"Position\":{\"Item1\":16,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QRNG\",\"Name\":\"RandInt\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\ikeav\\\\Desktop\\\\Quantum Computing\\\\Q# Practice\\\\QRNG\\\\Program.qs\",\"Position\":{\"Item1\":16,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"QRNG\",\"Name\":\"RandIntInRange\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\ikeav\\\\Desktop\\\\Quantum Computing\\\\Q# Practice\\\\QRNG\\\\Program.qs\",\"Position\":{\"Item1\":28,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"range\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":26},\"Item2\":{\"Line\":1,\"Column\":31}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"Int\"},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QRNG\",\"Name\":\"RandIntInRange\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\ikeav\\\\Desktop\\\\Quantum Computing\\\\Q# Practice\\\\QRNG\\\\Program.qs\",\"Position\":{\"Item1\":28,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"QRNG\",\"Name\":\"CollapseQubit\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\ikeav\\\\Desktop\\\\Quantum Computing\\\\Q# Practice\\\\QRNG\\\\Program.qs\",\"Position\":{\"Item1\":43,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"Result\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QRNG\",\"Name\":\"CollapseQubit\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\ikeav\\\\Desktop\\\\Quantum Computing\\\\Q# Practice\\\\QRNG\\\\Program.qs\",\"Position\":{\"Item1\":43,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
#line hidden
namespace QRNG
{
    [SourceLocation("C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs", OperationFunctor.Body, 10, 17)]
    public partial class SayHello : Operation<QVoid, QVoid>, ICallable
    {
        public SayHello(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "SayHello";
        String ICallable.FullName => "QRNG.SayHello";
        public static EntryPointInfo<QVoid, QVoid> Info => new EntryPointInfo<QVoid, QVoid>(typeof(SayHello));
        protected ICallable<QVoid, Int64> RandInt__
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable<Int64, Int64> RandIntInRange__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 11 "C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs"
            var intVal = RandInt__.Apply(QVoid.Instance);
#line 12 "C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs"
            Message__.Apply(String.Format("Random int: {0}", intVal));
#line 13 "C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs"
            var intInRange = RandIntInRange__.Apply(100L);
#line 14 "C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs"
            Message__.Apply(String.Format("Random int up to 100: {0}", intInRange));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.RandInt__ = this.__Factory__.Get<ICallable<QVoid, Int64>>(typeof(RandInt));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.RandIntInRange__ = this.__Factory__.Get<ICallable<Int64, Int64>>(typeof(RandIntInRange));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<SayHello, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs", OperationFunctor.Body, 17, 29)]
    public partial class RandInt : Operation<QVoid, Int64>, ICallable
    {
        public RandInt(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "RandInt";
        String ICallable.FullName => "QRNG.RandInt";
        protected ICallable<Result, Boolean> Microsoft__Quantum__Canon__IsResultOne
        {
            get;
            set;
        }

        protected ICallable<QVoid, Result> CollapseQubit__
        {
            get;
            set;
        }

        public override Func<QVoid, Int64> __Body__ => (__in__) =>
        {
#line 18 "C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs"
            var val = 0L;
#line 19 "C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs"
            var bVal = 1L;
#line 20 "C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs"
            foreach (var index in new QRange(0L, 30L))
#line hidden
            {
#line 21 "C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs"
                if (Microsoft__Quantum__Canon__IsResultOne.Apply(CollapseQubit__.Apply(QVoid.Instance)))
                {
#line 22 "C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs"
                    val = (val + bVal);
                }

#line 24 "C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs"
                bVal = (bVal * 2L);
            }

#line 26 "C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs"
            return val;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Canon__IsResultOne = this.__Factory__.Get<ICallable<Result, Boolean>>(typeof(global::Microsoft.Quantum.Canon.IsResultOne));
            this.CollapseQubit__ = this.__Factory__.Get<ICallable<QVoid, Result>>(typeof(CollapseQubit));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__)
        {
            return __m__.Run<RandInt, QVoid, Int64>(QVoid.Instance);
        }
    }

    [SourceLocation("C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs", OperationFunctor.Body, 29, 44)]
    public partial class RandIntInRange : Operation<Int64, Int64>, ICallable
    {
        public RandIntInRange(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "RandIntInRange";
        String ICallable.FullName => "QRNG.RandIntInRange";
        protected ICallable<Result, Boolean> Microsoft__Quantum__Canon__IsResultOne
        {
            get;
            set;
        }

        protected ICallable<QVoid, Result> CollapseQubit__
        {
            get;
            set;
        }

        public override Func<Int64, Int64> __Body__ => (__in__) =>
        {
            var range = __in__;
#line 30 "C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs"
            var val = 0L;
#line 31 "C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs"
            var bVal = 1L;
#line 32 "C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs"
            foreach (var index in new QRange(0L, 30L))
#line hidden
            {
#line 33 "C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs"
                if (Microsoft__Quantum__Canon__IsResultOne.Apply(CollapseQubit__.Apply(QVoid.Instance)))
                {
#line 34 "C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs"
                    val = (val + bVal);
#line 35 "C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs"
                    if ((val > range))
                    {
#line 36 "C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs"
                        return (val % range);
                    }
                }

#line 39 "C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs"
                bVal = (bVal * 2L);
            }

#line 41 "C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs"
            return val;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Canon__IsResultOne = this.__Factory__.Get<ICallable<Result, Boolean>>(typeof(global::Microsoft.Quantum.Canon.IsResultOne));
            this.CollapseQubit__ = this.__Factory__.Get<ICallable<QVoid, Result>>(typeof(CollapseQubit));
        }

        public override IApplyData __DataIn__(Int64 data) => new QTuple<Int64>(data);
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, Int64 range)
        {
            return __m__.Run<RandIntInRange, Int64, Int64>(range);
        }
    }

    [SourceLocation("C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs", OperationFunctor.Body, 44, -1)]
    public partial class CollapseQubit : Operation<QVoid, Result>, ICallable
    {
        public CollapseQubit(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "CollapseQubit";
        String ICallable.FullName => "QRNG.CollapseQubit";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> Microsoft__Quantum__Measurement__MResetZ
        {
            get;
            set;
        }

        public override Func<QVoid, Result> __Body__ => (__in__) =>
        {
#line hidden
            {
#line 45 "C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs"
                var q = Allocate__.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 46 "C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs"
                    Microsoft__Quantum__Intrinsic__H.Apply(q);
#line 47 "C:\\Users\\ikeav\\Desktop\\Quantum Computing\\Q# Practice\\QRNG\\Program.qs"
                    return Microsoft__Quantum__Measurement__MResetZ.Apply(q);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(q);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Measurement__MResetZ = this.__Factory__.Get<ICallable<Qubit, Result>>(typeof(global::Microsoft.Quantum.Measurement.MResetZ));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(Result data) => new QTuple<Result>(data);
        public static System.Threading.Tasks.Task<Result> Run(IOperationFactory __m__)
        {
            return __m__.Run<CollapseQubit, QVoid, Result>(QVoid.Instance);
        }
    }
}